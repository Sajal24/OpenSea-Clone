use thirdweb SDK and dependancies
created a NFT collection and a NFT marketplace in thirdweb with Goerli testnet (sent the funds - eth and link by chainlink faucet website, that provides free funds for testnets)
Minted the NFTs in the NFT collection contract, first made in thirdweb
Listed the NFTs in the NFT marketplace contract, first made in thirdweb


Now using Replit


In app.js
Importing {ChainId, ThirdwebProvider} from '@thirdweb-dev/react' - The modules needed to use thirdweb SDK and we will wrap our app with <ThirdwebProvider> </ThirdwebProvider> so that we can use thirdweb in our app,
-
Chainid for stating what network we are working on, like here Goerli


Now we have specified the network, but to get connected with the network, we need specific rpc to get connected with Goerli
-
use infura to connect to ethereum network easily, without creating our own rpc node - saving us a lot of time


In index.js
Authenticating the user - with thirdweb tools:
Importing { useAddress, useMetamask} from '@thirdweb-dev/react' - to use connect with wallet feature (on a button with onClick function) with just one hook - useMetamask() - super ez hook provided by thirdweb
-
useMetamask connects your wallet but to know if you're connected, we use useAddress hook
storing the useAddress() in a constant means you store the wallet address that is just connected with metamask.

Now using a more neat way of Authenticating a user, with the use of ternary operator, check this out:

import {useAddress, useMetamask} from '@thirdweb-dev/react'

export default function Home() {
   const connectWithMetamask = useMetamask()
   const storedAddress = useAddress()

   console.log(storedAddress);

   const Auth = () => {
     return (
     <div className={style.wrapper}>
        <button onClick={connectWithMetamask}>Connect with Metamask</button> 
     </div>
   )
   }

   return <>{storedAddress ? <div>LOGGED IN</div> : Auth()}</>

}


